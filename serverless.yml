# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

name: indiretas-anonimas
service: indiretas-anonimas
# app and org for use with dashboard.serverless.com
app: indiretas-anonimas
org: minimarvin
plugins:
  - serverless-dotenv-plugin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    MESSAGES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
    
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  status:
    handler: src/handler.status
    memorySize: 128
    description: Retorna uma mensagem de boas vindas
    events:
      - http:
          path: status
          method: get
  createPost:
    handler: src/handler.createPost
    memorySize: 128
    description: Cria uma mensagem anonima
    events:
      - http:
          path: createPost
          method: post
  twitterHandler:
    handler: src/handler.twitterHandler
    memorySize: 128
    description: Webhook para os posts que vem das ações que ocorrem no twitter
    events:
      - http:
          path: webhooks/twitter
          method: post
  twitterCrc:
    handler: src/handler.twitterCrc
    memorySize: 128
    description: Webhook para o desafio de crc do twitter
    events:
      - http:
          path: webhooks/twitter
          method: get
  
# you can add CloudFormation resource templates here
resources:
  Resources:
    MessagesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
        -
          AttributeName: id
          AttributeType: S
        -
          AttributeName: date
          AttributeType: S
        KeySchema:
        -
          AttributeName: id
          KeyType: HASH
        -
          AttributeName: date
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.MESSAGES_TABLE}
  Outputs:
    NewOutput:
      Description: "Description for the output"
      Value: "Some output value"
