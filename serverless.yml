service: indiretas-anonimas
app: indiretas-anonimas
org: minimarvin
plugins:
  - serverless-dotenv-plugin
frameworkVersion: '2'
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    MESSAGES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    CONFESSIONS_QUEUE: ${self:service}-confession-queue-${opt:stage, self:provider.stage}
    CONFESSIONS_QUEUE_DLQ: ${self:service}-confession-queue-${opt:stage, self:provider.stage}-dlq
    CONFESSIONS_QUEUE_URL: { Ref: ConfessionsQueue }
    FEEDBACK_QUEUE: ${self:service}-feedback-queue-${opt:stage, self:provider.stage}
    FEEDBACK_QUEUE_DLQ: ${self:service}-feedback-queue-${opt:stage, self:provider.stage}-dlq
    FEEDBACK_QUEUE_URL: { Ref: FeedbackQueue }
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - sqs:SendMessage
      Resource: '*'
functions:
  status:
    handler: src/handler.status
    memorySize: 128
    description: Retorna uma mensagem de boas vindas
    events:
      - http:
          path: status
          method: get
  twitterHandler:
    handler: src/handler.twitterHandler
    memorySize: 128
    description: Webhook para os posts que vem das ações que ocorrem no twitter
    events:
      - http:
          path: webhooks/twitter
          method: post
  twitterCrc:
    handler: src/handler.twitterCrc
    memorySize: 128
    description: Webhook para o desafio de crc do twitter
    events:
      - http:
          path: webhooks/twitter
          method: get
  processConfession:
    handler: src/handler.processConfession
    memorySize: 1024
    timeout: 10
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ConfessionsQueue
              - Arn
  # chatFeedback:
  #   handler: src/handler.chatFeedback
  #   memorySize: 128
  #   timeout: 10
  #   events:
  #     - sqs:
  #         arn:
  #           Fn::GetAtt:
  #             - FeedbackQueue
  #             - Arn

# you can add CloudFormation resource templates here
resources:
  Resources:
    MessagesTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: ${self:provider.environment.MESSAGES_TABLE}
    ConfessionsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.environment.CONFESSIONS_QUEUE}
        DelaySeconds: 600
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - ConfessionsQueueDLQ
              - Arn
          maxReceiveCount: 4
    ConfessionsQueueDLQ:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.environment.CONFESSIONS_QUEUE_DLQ}
    FeedbackQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.environment.FEEDBACK_QUEUE}
        DelaySeconds: 10
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - FeedbackQueueDLQ
              - Arn
          maxReceiveCount: 4
    FeedbackQueueDLQ:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:provider.environment.FEEDBACK_QUEUE_DLQ}
  Outputs:
    NewOutput:
      Description: 'Description for the output'
      Value: 'Some output value'
